# Import Required Packages
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

penguins_df = pd.read_csv("data/penguins.csv")

# Data Overview
#penguins_df.head()
#penguins_df.info()


# Drop null values
penguins_df.isna().sum()
penguins_df.dropna(inplace=True)

# Remove outliers
penguins_clean = penguins_df[(penguins_df['flipper_length_mm'] < 3000) & (penguins_df['flipper_length_mm'] > 0)]
#print(penguins_clean.describe())  #uncomment to review data

# Create dummy variables(one-hot encoded)
penguins_clean = pd.get_dummies(penguins_clean, drop_first=True)

# Standard Scaler
scaler = StandardScaler()
penguins_preprocessed = scaler.fit_transform(penguins_clean)

# Principal Component Analysis
pca = PCA(n_components=None)
pca.fit(penguins_preprocessed)
pca.explained_variance_ratio_
n_components = sum(pca.explained_variance_ratio_>0.1)

pca = PCA(n_components=n_components)
penguins_PCA = pca.fit_transform(penguins_preprocessed)

# Detect the optimal number of clusters for k-means clustering
inertia = []

for k in range(1, 30):
    kmeans = KMeans(n_clusters=k, random_state=42).fit(penguins_PCA)
    inertia.append(kmeans.inertia_)

# Uncomment to View Elbow Method Chart
"""
plt.plot(range(1, 30), inertia, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.title('Elbow Method')
plt.show()
"""

# Set Clusters to 4
n_clusters = 4


# K-means clustering algorithm
kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(penguins_PCA)

# Create a final statistical DataFrame for each cluster.
penguins_clean['label'] = kmeans.labels_
numeric_columns = ['culmen_length_mm', 'culmen_depth_mm', 'flipper_length_mm','label']
stat_penguins = penguins_clean.groupby('label')[numeric_columns].mean()
print(stat_penguins)

# K-means plot
plt.scatter(penguins_PCA[:, 0], penguins_PCA[:, 1], c=kmeans.labels_)
plt.xlabel('First Principal Component')
plt.ylabel('Second Principal Component')
plt.title(f'K-means Clustering (K={n_clusters})')
plt.legend()
plt.show()
